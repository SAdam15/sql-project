from faker import Faker

# Klasa bazowa przechowująca dane kontaktowe
class BaseContact:
    def __init__(self, imie, nazwisko, telefon, email):
        self.imie = imie
        self.nazwisko = nazwisko
        self.telefon = telefon
        self.email = email
    
    def contact(self):
        print(f"Wybieram numer {self.telefon} i dzwonię do {self.imie} {self.nazwisko}")
           
    @property
    def label_length(self):
        return len(self.imie + ' ' + self.nazwisko)

# Klasa rozszerzająca BaseContact o dane związane z pracą
class BusinessContact(BaseContact):
    def __init__(self, imie, nazwisko, telefon, email, stanowisko, firma, telefon_sluzbowy):
        super().__init__(imie, nazwisko, telefon, email)
        self.stanowisko = stanowisko
        self.firma = firma
        self.telefon_sluzbowy = telefon_sluzbowy
    
    def contact(self):
        print(f"Wybieram numer {self.telefon_sluzbowy} i dzwonię do {self.imie} {self.nazwisko}")
    
    @property
    def label_length(self):
        return len(self.imie + ' ' + self.nazwisko)

# Funkcja generująca wizytówki
def create_contacts(contact_type, quantity):
    fake = Faker()
    contacts = []
    
    for _ in range(quantity):
        imie = fake.first_name()
        nazwisko = fake.last_name()
        telefon = fake.phone_number()
        email = fake.email()
        
        if contact_type == BaseContact:
            contacts.append(BaseContact(imie, nazwisko, telefon, email))
        elif contact_type == BusinessContact:
            stanowisko = fake.job()
            firma = fake.company()
            telefon_sluzbowy = fake.phone_number()
            contacts.append(BusinessContact(imie, nazwisko, telefon, email, stanowisko, firma, telefon_sluzbowy))
    
    return contacts